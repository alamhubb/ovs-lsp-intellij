// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/grammar/Es6.flex

package com.alamhubb.ovs.testovs.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.alamhubb.ovs.testovs.lexer.Es6TokenTypes.*;

/**
 * ES6 (ECMAScript 2015) Lexer
 * 基于 ECMA-262 6th Edition 标准
 * 
 * 参考:
 * - https://262.ecma-international.org/6.0/index.html
 * - slime-parser/src/language/es2015/Es6Tokens.ts
 * - slime-parser/src/language/es5/Es5Tokens.ts
 */


public class _Es6Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\6\25\2\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\0\1\35\1\36\2\35\1\37\1\35\10\40"+
    "\1\41\10\40\1\42\2\40\1\43\1\44\1\45\1\46"+
    "\1\40\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\40\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\40\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\40\1\77\1\100\1\101\1\102"+
    "\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\21\4\1\31\1\32\1\33"+
    "\1\34\1\35\1\0\1\36\1\0\1\37\1\40\1\41"+
    "\2\0\1\42\1\43\1\44\1\45\1\46\3\0\1\47"+
    "\1\50\7\0\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\3\0\1\60\1\61\6\4\1\62\10\4\1\63"+
    "\1\4\1\64\3\4\1\65\16\4\1\66\1\67\3\0"+
    "\1\70\1\71\1\72\1\73\2\0\1\73\3\0\2\17"+
    "\1\0\3\17\1\74\1\75\1\76\1\77\1\100\17\4"+
    "\1\101\2\4\1\102\2\4\1\103\1\104\2\4\1\105"+
    "\7\4\1\106\1\4\1\107\4\4\1\110\3\0\1\111"+
    "\3\4\1\112\7\4\1\113\4\4\1\114\3\4\1\115"+
    "\5\4\1\116\1\4\1\117\1\4\1\120\1\4\1\121"+
    "\1\4\2\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\6\4\1\131\6\4\1\132\2\4\1\133\1\4\1\134"+
    "\1\135\3\4\1\136\1\137\3\4\1\140\1\4\1\141"+
    "\1\142\1\143\1\144\1\145\2\4\1\146\1\147\1\150"+
    "\2\4\1\151\1\152\1\153\2\4\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\103\0\103\0\u025b\0\u029e\0\103\0\u02e1\0\u0324"+
    "\0\u0367\0\u03aa\0\u03ed\0\103\0\103\0\u0430\0\u0473\0\u04b6"+
    "\0\103\0\103\0\103\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\103\0\u09f2"+
    "\0\u0a35\0\103\0\u0a78\0\u010c\0\103\0\u0abb\0\103\0\103"+
    "\0\103\0\u0218\0\u0afe\0\103\0\103\0\103\0\103\0\103"+
    "\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0b84\0\u0c4d\0\u0c90\0\u0cd3"+
    "\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\103\0\u0e65\0\103"+
    "\0\103\0\u0ea8\0\103\0\u053c\0\u0eeb\0\u0f2e\0\103\0\u0f71"+
    "\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u014f\0\u1146"+
    "\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u014f"+
    "\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u014f\0\u14ad\0\u14f0"+
    "\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708"+
    "\0\u174b\0\u178e\0\u17d1\0\u1814\0\103\0\103\0\u0a35\0\u1857"+
    "\0\u189a\0\103\0\103\0\103\0\u18dd\0\u1920\0\u1963\0\u19a6"+
    "\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u0d16\0\u1af5\0\u1af5\0\u0d9c"+
    "\0\u0ddf\0\103\0\103\0\103\0\u1b38\0\u053c\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u014f\0\u1f68\0\u1fab"+
    "\0\u014f\0\u1fee\0\u2031\0\u014f\0\u014f\0\u2074\0\u20b7\0\u014f"+
    "\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u014f"+
    "\0\u22cf\0\u014f\0\u2312\0\u2355\0\u2398\0\u23db\0\u0a35\0\u241e"+
    "\0\u2461\0\u24a4\0\103\0\u24e7\0\u252a\0\u256d\0\u014f\0\u25b0"+
    "\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u014f\0\u2785"+
    "\0\u27c8\0\u280b\0\u284e\0\u014f\0\u2891\0\u28d4\0\u2917\0\u014f"+
    "\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u014f\0\u2aa9\0\u014f"+
    "\0\u2aec\0\u014f\0\u2b2f\0\u014f\0\u2b72\0\103\0\u0c4d\0\u014f"+
    "\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u2bb5\0\u2bf8\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\u014f\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10"+
    "\0\u2e53\0\u2e96\0\u014f\0\u2ed9\0\u2f1c\0\u014f\0\u2f5f\0\u014f"+
    "\0\u014f\0\u2fa2\0\u2fe5\0\u3028\0\u014f\0\u014f\0\u306b\0\u30ae"+
    "\0\u30f1\0\u014f\0\u3134\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f"+
    "\0\u3177\0\u31ba\0\u014f\0\u014f\0\u014f\0\u31fd\0\u3240\0\u014f"+
    "\0\u014f\0\u014f\0\u3283\0\u32c6\0\u014f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\3\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\6\6\1\32\1\2\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\6"+
    "\1\45\1\6\1\46\1\6\1\47\1\50\1\6\1\51"+
    "\1\52\1\53\1\6\1\54\1\55\1\6\1\56\1\57"+
    "\1\60\1\61\1\62\104\0\2\3\1\0\1\3\130\0"+
    "\1\63\50\0\2\64\1\0\3\64\1\65\35\64\1\66"+
    "\36\64\7\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\27\6\36\0\1\67\61\0\1\70\20\0\1\71\50\0"+
    "\2\72\1\0\7\72\1\65\31\72\1\73\36\72\32\0"+
    "\1\74\66\0\1\75\13\0\1\76\70\0\1\77\2\0"+
    "\1\22\3\23\3\0\1\100\71\0\1\101\61\0\2\102"+
    "\1\0\12\102\1\103\4\102\1\104\7\102\1\105\10\102"+
    "\1\106\1\107\36\102\21\0\1\110\1\0\4\23\7\0"+
    "\1\111\1\112\1\0\1\113\1\114\6\0\1\111\2\0"+
    "\1\112\10\0\1\113\7\0\1\114\26\0\1\110\1\0"+
    "\4\23\10\0\1\112\14\0\1\112\57\0\1\115\1\116"+
    "\102\0\1\117\1\120\101\0\1\121\1\122\101\0\1\123"+
    "\50\0\7\124\1\125\34\124\1\126\2\124\1\127\33\124"+
    "\7\0\1\6\13\0\4\6\6\0\6\6\5\0\20\6"+
    "\1\130\3\6\1\131\2\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\17\6\1\132\7\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\1\133\11\6\1\134"+
    "\2\6\1\135\11\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\4\6\1\136\10\6\1\137\11\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\12\6\1\140"+
    "\12\6\1\141\1\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\1\142\7\6\1\143\4\6\1\144\1\6"+
    "\1\145\2\6\1\146\4\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\4\6\1\147\22\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\5\6\1\150\5\6"+
    "\1\151\1\152\12\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\4\6\1\153\22\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\4\6\1\154\15\6\1\155"+
    "\4\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\5\6\1\156\21\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\4\6\1\157\22\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\4\6\1\160\14\6\1\161"+
    "\1\162\1\6\1\163\2\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\1\164\6\6\1\165\7\6\1\166"+
    "\6\6\1\167\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\1\170\14\6\1\171\11\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\7\6\1\172\1\173\16\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\10\6"+
    "\1\174\16\6\36\0\1\175\45\0\1\176\2\0\7\177"+
    "\1\200\34\177\1\201\2\177\1\202\33\177\32\0\1\203"+
    "\50\0\2\64\3\0\76\64\2\72\3\0\76\72\21\0"+
    "\1\204\61\0\2\102\1\0\17\102\1\205\20\102\1\106"+
    "\1\107\36\102\2\103\1\206\12\103\1\207\4\103\1\210"+
    "\20\103\1\211\1\212\36\103\2\104\1\0\100\104\2\106"+
    "\1\0\41\106\1\213\1\102\35\106\2\102\3\0\76\102"+
    "\23\0\4\214\77\0\2\215\74\0\1\216\1\0\1\216"+
    "\2\0\4\217\77\0\3\220\100\0\4\221\6\0\3\221"+
    "\10\0\6\221\57\0\1\222\102\0\1\223\102\0\1\224"+
    "\1\225\47\0\7\124\1\125\34\124\1\126\2\124\1\127"+
    "\27\124\1\226\5\124\3\0\76\124\7\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\26\6\1\227\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\1\230\26\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\4\6\1\231"+
    "\22\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\20\6\1\232\1\233\5\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\1\234\26\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\14\6\1\235\12\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\1\6\1\236"+
    "\3\6\1\237\4\6\1\240\14\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\20\6\1\241\6\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\16\6\1\242"+
    "\2\6\1\243\5\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\12\6\1\244\14\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\14\6\1\245\12\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\17\6\1\246"+
    "\7\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\15\6\1\247\11\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\14\6\1\250\12\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\21\6\1\251\5\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\16\6\1\252"+
    "\10\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\20\6\1\253\6\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\21\6\1\254\5\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\24\6\1\255\2\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\12\6\1\256"+
    "\14\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\21\6\1\257\5\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\21\6\1\260\5\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\1\261\26\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\16\6\1\262\10\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\10\6"+
    "\1\263\16\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\17\6\1\264\7\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\10\6\1\265\6\6\1\266\7\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\22\6"+
    "\1\267\3\6\1\270\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\16\6\1\271\10\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\17\6\1\272\7\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\10\6\1\273"+
    "\16\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\10\6\1\274\16\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\21\6\1\275\5\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\4\6\1\276\22\6\4\0"+
    "\7\177\1\200\34\177\1\201\2\177\1\202\27\177\1\277"+
    "\5\177\3\0\76\177\56\0\1\205\1\0\1\205\2\0"+
    "\1\205\4\0\1\205\1\0\2\205\2\0\1\205\4\0"+
    "\15\206\1\300\65\206\2\103\1\206\12\103\1\207\4\103"+
    "\1\205\20\103\1\211\1\212\36\103\15\206\1\300\40\206"+
    "\1\210\1\206\1\210\2\206\1\210\4\206\1\210\1\206"+
    "\2\210\2\206\1\210\4\206\2\211\1\206\12\211\1\301"+
    "\26\211\1\302\1\103\35\211\2\103\3\206\10\103\1\207"+
    "\65\103\2\106\3\0\76\106\23\0\4\214\10\0\1\112"+
    "\14\0\1\112\51\0\4\217\106\0\1\303\57\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\14\6\1\304\12\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\10\6"+
    "\1\305\16\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\1\306\26\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\4\6\1\307\22\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\2\6\1\310\24\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\20\6\1\311"+
    "\6\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\20\6\1\312\1\313\5\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\22\6\1\314\4\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\1\315\26\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\4\6\1\316"+
    "\22\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\4\6\1\317\22\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\15\6\1\320\11\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\4\6\1\321\22\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\20\6\1\322"+
    "\6\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\1\323\26\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\13\6\1\324\13\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\2\6\1\325\24\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\15\6\1\326\11\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\21\6"+
    "\1\327\5\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\12\6\1\330\14\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\22\6\1\331\4\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\21\6\1\332\5\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\4\6"+
    "\1\333\22\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\21\6\1\334\5\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\6\6\1\335\20\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\20\6\1\336\6\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\15\6"+
    "\1\337\11\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\4\6\1\340\22\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\4\6\1\341\22\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\3\6\1\342\23\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\12\6"+
    "\1\343\14\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\7\6\1\344\17\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\12\6\1\345\14\6\4\0\15\206"+
    "\1\300\4\206\1\346\60\206\2\211\1\206\12\211\1\301"+
    "\4\211\1\347\21\211\1\302\1\103\37\211\3\206\10\211"+
    "\1\301\65\211\7\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\2\6\1\350\24\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\21\6\1\351\5\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\11\6\1\352\15\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\7\6"+
    "\1\353\17\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\20\6\1\354\6\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\21\6\1\355\5\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\10\6\1\356\16\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\6\6"+
    "\1\357\20\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\22\6\1\360\4\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\21\6\1\361\5\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\17\6\1\362\7\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\14\6"+
    "\1\363\12\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\4\6\1\364\22\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\12\6\1\365\14\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\21\6\1\366\5\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\17\6"+
    "\1\367\7\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\1\370\26\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\17\6\1\371\7\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\10\6\1\372\16\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\17\6\1\373"+
    "\7\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\2\6\1\374\24\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\4\6\1\375\22\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\24\6\1\376\2\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\15\6\1\377"+
    "\11\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\4\6\1\u0100\22\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\3\6\1\u0101\23\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\14\6\1\u0102\12\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\6\6\1\u0103"+
    "\20\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\12\6\1\u0104\14\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\4\6\1\u0105\22\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\21\6\1\u0106\5\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\3\6\1\u0107"+
    "\23\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\12\6\1\u0108\14\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\10\6\1\u0109\16\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\21\6\1\u010a\5\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\14\6\1\u010b"+
    "\12\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\14\6\1\u010c\12\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\2\6\1\u010d\24\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\7\6\1\u010e\17\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\21\6\1\u010f"+
    "\5\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\5\6\1\u0110\21\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\22\6\1\u0111\4\6\13\0\1\6\13\0"+
    "\4\6\6\0\6\6\5\0\4\6\1\u0112\22\6\13\0"+
    "\1\6\13\0\4\6\6\0\6\6\5\0\21\6\1\u0113"+
    "\5\6\13\0\1\6\13\0\4\6\6\0\6\6\5\0"+
    "\20\6\1\u0114\6\6\13\0\1\6\13\0\4\6\6\0"+
    "\6\6\5\0\26\6\1\u0115\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\15\6\1\u0116\11\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\2\6\1\u0117\24\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\4\6"+
    "\1\u0118\22\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\17\6\1\u0119\7\6\13\0\1\6\13\0\4\6"+
    "\6\0\6\6\5\0\14\6\1\u011a\12\6\13\0\1\6"+
    "\13\0\4\6\6\0\6\6\5\0\4\6\1\u011b\22\6"+
    "\13\0\1\6\13\0\4\6\6\0\6\6\5\0\15\6"+
    "\1\u011c\11\6\13\0\1\6\13\0\4\6\6\0\6\6"+
    "\5\0\5\6\1\u011d\21\6\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13065];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\3\11\23\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\11\1\0\3\11\2\0\5\11\3\0\2\1\7\0"+
    "\1\1\1\11\1\1\2\11\1\1\1\11\3\0\1\11"+
    "\45\1\2\11\3\0\3\11\1\1\2\0\1\1\3\0"+
    "\2\1\1\0\3\1\3\11\53\1\3\0\1\11\42\1"+
    "\1\11\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _Es6Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 109: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 110: break;
          case 3:
            { return EXCLAMATION;
            }
          // fall through
          case 111: break;
          case 4:
            { return IDENTIFIER;
            }
          // fall through
          case 112: break;
          case 5:
            { return PERCENT;
            }
          // fall through
          case 113: break;
          case 6:
            { return AMPERSAND;
            }
          // fall through
          case 114: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 115: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 116: break;
          case 9:
            { return ASTERISK;
            }
          // fall through
          case 117: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 118: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 119: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 120: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 121: break;
          case 14:
            { return SLASH;
            }
          // fall through
          case 122: break;
          case 15:
            { return NUMERIC_LITERAL;
            }
          // fall through
          case 123: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 124: break;
          case 17:
            { return SEMICOLON;
            }
          // fall through
          case 125: break;
          case 18:
            { return LESS;
            }
          // fall through
          case 126: break;
          case 19:
            { return EQ;
            }
          // fall through
          case 127: break;
          case 20:
            { return MORE;
            }
          // fall through
          case 128: break;
          case 21:
            { return QUESTION;
            }
          // fall through
          case 129: break;
          case 22:
            { return LBRACKET;
            }
          // fall through
          case 130: break;
          case 23:
            { return RBRACKET;
            }
          // fall through
          case 131: break;
          case 24:
            { return CIRCUMFLEX;
            }
          // fall through
          case 132: break;
          case 25:
            { return LBRACE;
            }
          // fall through
          case 133: break;
          case 26:
            { return VERTICAL_BAR;
            }
          // fall through
          case 134: break;
          case 27:
            { return RBRACE;
            }
          // fall through
          case 135: break;
          case 28:
            { return TILDE;
            }
          // fall through
          case 136: break;
          case 29:
            { return NOT_EQ;
            }
          // fall through
          case 137: break;
          case 30:
            { return STRING_LITERAL;
            }
          // fall through
          case 138: break;
          case 31:
            { return PERCENT_EQ;
            }
          // fall through
          case 139: break;
          case 32:
            { return AMPERSAND_AMPERSAND;
            }
          // fall through
          case 140: break;
          case 33:
            { return AMPERSAND_EQ;
            }
          // fall through
          case 141: break;
          case 34:
            { return ASTERISK_EQ;
            }
          // fall through
          case 142: break;
          case 35:
            { return PLUS_PLUS;
            }
          // fall through
          case 143: break;
          case 36:
            { return PLUS_EQ;
            }
          // fall through
          case 144: break;
          case 37:
            { return MINUS_MINUS;
            }
          // fall through
          case 145: break;
          case 38:
            { return MINUS_EQ;
            }
          // fall through
          case 146: break;
          case 39:
            { return LINE_COMMENT;
            }
          // fall through
          case 147: break;
          case 40:
            { return SLASH_EQ;
            }
          // fall through
          case 148: break;
          case 41:
            { return LESS_LESS;
            }
          // fall through
          case 149: break;
          case 42:
            { return LESS_EQ;
            }
          // fall through
          case 150: break;
          case 43:
            { return EQ_EQ;
            }
          // fall through
          case 151: break;
          case 44:
            { return ARROW;
            }
          // fall through
          case 152: break;
          case 45:
            { return MORE_EQ;
            }
          // fall through
          case 153: break;
          case 46:
            { return MORE_MORE;
            }
          // fall through
          case 154: break;
          case 47:
            { return CIRCUMFLEX_EQ;
            }
          // fall through
          case 155: break;
          case 48:
            { return TEMPLATE_NO_SUBSTITUTION;
            }
          // fall through
          case 156: break;
          case 49:
            { return AS;
            }
          // fall through
          case 157: break;
          case 50:
            { return DO;
            }
          // fall through
          case 158: break;
          case 51:
            { return IF;
            }
          // fall through
          case 159: break;
          case 52:
            { return IN;
            }
          // fall through
          case 160: break;
          case 53:
            { return OF;
            }
          // fall through
          case 161: break;
          case 54:
            { return VERTICAL_BAR_EQ;
            }
          // fall through
          case 162: break;
          case 55:
            { return VERTICAL_BAR_VERTICAL_BAR;
            }
          // fall through
          case 163: break;
          case 56:
            { return TEMPLATE_TAIL;
            }
          // fall through
          case 164: break;
          case 57:
            { return NOT_EQ_EQ;
            }
          // fall through
          case 165: break;
          case 58:
            { return ELLIPSIS;
            }
          // fall through
          case 166: break;
          case 59:
            { return REGEX_LITERAL;
            }
          // fall through
          case 167: break;
          case 60:
            { return LESS_LESS_EQ;
            }
          // fall through
          case 168: break;
          case 61:
            { return EQ_EQ_EQ;
            }
          // fall through
          case 169: break;
          case 62:
            { return MORE_MORE_EQ;
            }
          // fall through
          case 170: break;
          case 63:
            { return MORE_MORE_MORE;
            }
          // fall through
          case 171: break;
          case 64:
            { return TEMPLATE_HEAD;
            }
          // fall through
          case 172: break;
          case 65:
            { return FOR;
            }
          // fall through
          case 173: break;
          case 66:
            { return GET;
            }
          // fall through
          case 174: break;
          case 67:
            { return LET;
            }
          // fall through
          case 175: break;
          case 68:
            { return NEW;
            }
          // fall through
          case 176: break;
          case 69:
            { return SET;
            }
          // fall through
          case 177: break;
          case 70:
            { return TRY;
            }
          // fall through
          case 178: break;
          case 71:
            { return VAR;
            }
          // fall through
          case 179: break;
          case 72:
            { return TEMPLATE_MIDDLE;
            }
          // fall through
          case 180: break;
          case 73:
            { return MORE_MORE_MORE_EQ;
            }
          // fall through
          case 181: break;
          case 74:
            { return CASE;
            }
          // fall through
          case 182: break;
          case 75:
            { return ELSE;
            }
          // fall through
          case 183: break;
          case 76:
            { return FROM;
            }
          // fall through
          case 184: break;
          case 77:
            { return NULL;
            }
          // fall through
          case 185: break;
          case 78:
            { return THIS;
            }
          // fall through
          case 186: break;
          case 79:
            { return TRUE;
            }
          // fall through
          case 187: break;
          case 80:
            { return VOID;
            }
          // fall through
          case 188: break;
          case 81:
            { return WITH;
            }
          // fall through
          case 189: break;
          case 82:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 190: break;
          case 83:
            { return ASYNC;
            }
          // fall through
          case 191: break;
          case 84:
            { return AWAIT;
            }
          // fall through
          case 192: break;
          case 85:
            { return BREAK;
            }
          // fall through
          case 193: break;
          case 86:
            { return CATCH;
            }
          // fall through
          case 194: break;
          case 87:
            { return CLASS;
            }
          // fall through
          case 195: break;
          case 88:
            { return CONST;
            }
          // fall through
          case 196: break;
          case 89:
            { return FALSE;
            }
          // fall through
          case 197: break;
          case 90:
            { return SUPER;
            }
          // fall through
          case 198: break;
          case 91:
            { return THROW;
            }
          // fall through
          case 199: break;
          case 92:
            { return WHILE;
            }
          // fall through
          case 200: break;
          case 93:
            { return YIELD;
            }
          // fall through
          case 201: break;
          case 94:
            { return DELETE;
            }
          // fall through
          case 202: break;
          case 95:
            { return EXPORT;
            }
          // fall through
          case 203: break;
          case 96:
            { return IMPORT;
            }
          // fall through
          case 204: break;
          case 97:
            { return RETURN;
            }
          // fall through
          case 205: break;
          case 98:
            { return STATIC;
            }
          // fall through
          case 206: break;
          case 99:
            { return SWITCH;
            }
          // fall through
          case 207: break;
          case 100:
            { return TARGET;
            }
          // fall through
          case 208: break;
          case 101:
            { return TYPEOF;
            }
          // fall through
          case 209: break;
          case 102:
            { return DEFAULT;
            }
          // fall through
          case 210: break;
          case 103:
            { return EXTENDS;
            }
          // fall through
          case 211: break;
          case 104:
            { return FINALLY;
            }
          // fall through
          case 212: break;
          case 105:
            { return CONTINUE;
            }
          // fall through
          case 213: break;
          case 106:
            { return DEBUGGER;
            }
          // fall through
          case 214: break;
          case 107:
            { return FUNCTION;
            }
          // fall through
          case 215: break;
          case 108:
            { return INSTANCEOF;
            }
          // fall through
          case 216: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
