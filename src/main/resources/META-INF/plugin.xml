<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>org.example.test-ovs-lsp</id>

    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <name>Test-ovs-lsp</name>

    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor email="support@yourcompany.com" url="https://www.yourcompany.com">YourCompany</vendor>

    <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
         Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
    <description>
        ovs is object view js
    </description>

    <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.lsp</depends>
    <depends>JavaScript</depends>

    <!-- Extension points defined by the plugin.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
    <extensions defaultExtensionNs="com.intellij">
        <fileType
                name="Ovs File"
                implementationClass="com.alamhubb.ovs.testovs.OvsFileType"
                fieldName="INSTANCE"
                language="ovs"
                extensions="ovs"/>
        <platform.lsp.serverSupportProvider implementation="com.alamhubb.ovs.testovs.OvsLspServerSupportProvider"/>

        <typedHandler implementation="com.alamhubb.ovs.testovs.OvsTypedHandler"/>

        <!-- 
        重要：不要注册 parserDefinition！
        
        原因：如果注册了 parserDefinition，IntelliJ 会认为这是一个"本地实现的语言"，
        将优先使用本地的 PSI 树和语法分析，而不会向 LSP 服务器请求 semantic tokens。
        
        对于纯 LSP 语言（如 OVS），只需要：
        - fileType（文件类型识别）
        - platform.lsp.serverSupportProvider（LSP 服务器配置）
        - typedHandler（输入辅助，可选）
        
        这样 IntelliJ 才会正确地使用 LSP semantic tokens 实现语义高亮。
        
        <lang.parserDefinition
                language="ovs"
                implementationClass="com.alamhubb.ovs.testovs.OvsParserDefinition"/>
        -->
        
        <!-- 语法高亮器（基于 ES6 JFlex Lexer） -->
        <lang.syntaxHighlighterFactory
                language="ovs"
                implementationClass="com.alamhubb.ovs.testovs.OvsSyntaxHighlighterFactory"/>
   <!--     <completion.contributor
                language="ovs"
                implementationClass="com.alamhubb.ovs.testovs.OvsCompletionContributor"/>-->
    </extensions>

    <actions>
        <action
                id="com.example.InspectHighlightingInfoAction"
                class="com.alamhubb.ovs.testovs.InspectHighlightingInfoAction"
                text="Inspect Highlighting Info"
                description="显示光标下的高亮类型和颜色">
            <add-to-group group-id="EditorPopupMenu" anchor="last"/>
        </action>
    </actions>
</idea-plugin>